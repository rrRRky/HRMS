@{
    ViewData["Title"] = "Cadre Master";
}

<div class="row">
    <div class="col-lg-12 col-xl-12 col-sm-12 col-12">
        <div class="card">
            <div class="card-header pt-2 border-bottom">
                <h5 class="card-title">All Cadre</h5>
                <button class="btn btn-sm btn-success" id="saveCadre" type="button" data-toggle="modal" data-target="#cadreAdd">Add</button>
            </div>

            <div class="card-body">
                <div class="table-responsive webTableviewsm">
                    <table id="myCadretable" class="display table-bordered table-striped table-hover">
                        <thead>
                            <tr id="searchInputs">
                                <!-- Search inputs will be dynamically added here -->
                            </tr>
                        </thead>
                    </table>

                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="cadreAdd" tabindex="-1" role="dialog" aria-labelledby="cadreAddLabel" aria-hidden="true">
    <div class="modal-dialog  modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cadreAddLabel">Add Cadre</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="row m-0 p-1">
                        <div class="col-12">
                            <div class="form-group mb-3">
                                <label class="form-label"> Cadre Name</label>
                                <input type="text" class="form-control" name="cadreName" id="cadreName" />
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" id="saveCadre" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="cadreEdit" tabindex="-1" role="dialog" aria-labelledby="cadreEditLabel" aria-hidden="true">
    <div class="modal-dialog  modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cadreEditLabel">Edit Cadre</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="row m-0 p-1">
                        <div class="col-12">
                            <div class="form-group mb-3">
                                <label class="form-label"> Cadre Name</label>
                                <input type="text" class="form-control" name="cadreName" id="cadreName" value="Cadre Name" />
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div>

<script>

    // Cadre Master DataTable Initialization
    $(document).ready(function () {
        var CadredataSet = [
            ['1', 'EXCUTIVE', 'Active'],
            ['2', 'MANAGEMENT', 'InActive'],
            ['3', 'SEMI SKILLED', 'Active'],
            ['4', 'SKILLED', 'InActive'],
        ];

        // Initialize DataTable
        var cadretable = $('#myCadretable').DataTable({
            data: CadredataSet,
            columnDefs: [
                { orderable: true, className: 'reorder', targets: 0 },
                { orderable: false, targets: '_all' },
                { searchable: true, targets: [1] },
                { searchable: false, targets: '_all' }
            ],
            columns: [
                { title: 'S. No.' },
                { title: 'Name' },
                { title: 'Status' },
                {
                    title: 'Action',
                    data: null,
                    render: function (data, type, row, meta) {
                        return `
                        <div class="dropdown">
                            <button class="btn btn-link" type="button" data-toggle="dropdown">
                                <span class="dropdown-dots fs--1"></span>
                            </button>
                            <div class="dropdown-menu dropdown-menu-left border py-0">
                                <div class="py-2">
                                    <a class="dropdown-item edit" href="javascript:void(0);" data-toggle="modal" data-target="#cadreEdit">Edit</a>
                                    <a class="dropdown-item inactive text-warning" href="javascript:void(0);">Inactive</a>
                                    <a class="dropdown-item delete text-danger" href="javascript:void(0);">Delete</a>
                                </div>
                            </div>
                        </div>
                    `;
                    }
                }
            ],

            initComplete: function () {
                let searchRow = $('#searchInputs');

                // Add search inputs and filter icons dynamically based on column definitions
                this.api().columns().every(function () {
                    let column = this;
                    let title = $(column.header()).text();
                    let columnIndex = column.index();

                    // Create search input element
                    let input = $('<input>')
                        .attr('placeholder', 'Search ' + title)
                        .addClass('form-control form-control-sm');


                    // Create a container for both input and filter icon
                    let container = $('<div>')
                        .addClass('d-flex')
                        .append(input);

                    // Append the container to the search row
                    $(searchRow).append($('<td>').append(container));

                    // Event listener for user input
                    input.on('keyup', function () {
                        if (column.search() !== this.value) {
                            column.search(this.value).draw();
                        }
                    });
                });
            }
        });

        // Handle the delete action
        $('#myCadretable tbody').on('click', 'a.delete', function () {
            var row = cadretable.row($(this).closest('tr')); // Get the row that contains the clicked delete button
            row.remove().draw(false); // Remove the row and redraw the table
        });

        // Handle Adding a New Row
        $('#saveCadre').on('click', function () {
            var cadreName = $('#cadreName').val();

            // Get the current number of rows in the table to generate the new S. No.
            var newRowData = [
                cadretable.data().count() + 1, // Incremental S. No.
                cadreName, // Cadre Name from input
                "Active" // Default status for new cadres
            ];

            // Add the new row to the table
            cadretable.row.add(newRowData).draw();

            // Hide the modal and clear the input field
            $('#cadreAdd').modal('hide');
            $('#cadreName').val('');
        });

    });


</script>
